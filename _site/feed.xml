<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://172.16.80.32:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://172.16.80.32:4000/" rel="alternate" type="text/html" hreflang="zh-CN" /><updated>2019-07-31T12:24:30+08:00</updated><id>http://172.16.80.32:4000/</id><title type="html">Ray_YC’s Blog</title><subtitle>我的博客，欢迎
</subtitle><author><name>雷永成|Ray_YC</name></author><entry><title type="html">Golang 数据类型的转换</title><link href="http://172.16.80.32:4000/2019/07/30/Go1.html" rel="alternate" type="text/html" title="Golang 数据类型的转换" /><published>2019-07-30T00:00:00+08:00</published><updated>2019-07-30T00:00:00+08:00</updated><id>http://172.16.80.32:4000/2019/07/30/Go1</id><content type="html" xml:base="http://172.16.80.32:4000/2019/07/30/Go1.html">&lt;h2 id=&quot;1基本数据类型之间的转换&quot;&gt;1、基本数据类型之间的转换&lt;/h2&gt;

&lt;h3 id=&quot;11string到int&quot;&gt;1.1、string到int&lt;/h3&gt;

&lt;p&gt;int,err:=strconv.Atoi(string)&lt;/p&gt;

&lt;h3 id=&quot;12string到int64&quot;&gt;1.2、string到int64&lt;/h3&gt;

&lt;p&gt;int64, err := strconv.ParseInt(string, 10, 64)&lt;/p&gt;

&lt;h3 id=&quot;13int到string&quot;&gt;1.3、int到string&lt;/h3&gt;

&lt;p&gt;string:=strconv.Itoa(int)&lt;/p&gt;

&lt;h3 id=&quot;14int64到string&quot;&gt;1.4、int64到string&lt;/h3&gt;

&lt;p&gt;string:=strconv.FormatInt(int64,10)&lt;/p&gt;

&lt;h3 id=&quot;15字符串到float32float64&quot;&gt;1.5、字符串到float32/float64&lt;/h3&gt;

&lt;p&gt;float32, err = ParseFloat(string, 32)&lt;/p&gt;

&lt;p&gt;float64,err = ParseFloat(string,64)&lt;/p&gt;

&lt;h3 id=&quot;16int64转int&quot;&gt;1.6、int64转int&lt;/h3&gt;

&lt;p&gt;int:=int(int64)&lt;/p&gt;

&lt;h3 id=&quot;17int转int64&quot;&gt;1.7、int转int64&lt;/h3&gt;

&lt;p&gt;int64:=int64(int)&lt;/p&gt;

&lt;h3 id=&quot;18string与byte之间的转换&quot;&gt;1.8、string与[]byte之间的转换：&lt;/h3&gt;

&lt;p&gt;string到[]byte:字节数组=[]byte(字符串)&lt;/p&gt;

&lt;p&gt;字节数组到string: 字符串=string([]byte)&lt;/p&gt;

&lt;h2 id=&quot;2interface与其他类型之间的转换&quot;&gt;2、interface{}与其他类型之间的转换&lt;/h2&gt;

&lt;p&gt;转换方式包括隐式转换与断言转换。&lt;/p&gt;

&lt;h3 id=&quot;21interface类型转换成具体类型interfacevar具体类型&quot;&gt;2.1、interface{}类型转换成具体类型：interfaceVar.(具体类型)&lt;/h3&gt;

&lt;p&gt;原理：断言实现。如：&lt;/p&gt;

&lt;p&gt;断言成功返回true,失败返回false&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;It's not ok for type string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The value is &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;-返回顶部-&quot;&gt;&lt;a href=&quot;javascript:scroll(0,0)&quot;&gt;– 返回顶部 –&lt;/a&gt;&lt;/h2&gt;</content><author><name>雷永成|Ray_YC</name></author><category term="GO-lang" /><summary type="html">1、基本数据类型之间的转换 1.1、string到int int,err:=strconv.Atoi(string) 1.2、string到int64 int64, err := strconv.ParseInt(string, 10, 64) 1.3、int到string string:=strconv.Itoa(int) 1.4、int64到string string:=strconv.FormatInt(int64,10) 1.5、字符串到float32/float64 float32, err = ParseFloat(string, 32) float64,err = ParseFloat(string,64) 1.6、int64转int int:=int(int64) 1.7、int转int64 int64:=int64(int) 1.8、string与[]byte之间的转换： string到[]byte:字节数组=[]byte(字符串) 字节数组到string: 字符串=string([]byte) 2、interface{}与其他类型之间的转换 转换方式包括隐式转换与断言转换。 2.1、interface{}类型转换成具体类型：interfaceVar.(具体类型) 原理：断言实现。如： 断言成功返回true,失败返回false 1 2 3 4 5 6 value, ok := a.(string) if !ok { fmt.Println(&quot;It's not ok for type string&quot;) return } fmt.Println(&quot;The value is &quot;, value) – 返回顶部 –</summary></entry><entry><title type="html">在使用golang时常见的错误</title><link href="http://172.16.80.32:4000/2019/07/30/go-blog2.html" rel="alternate" type="text/html" title="在使用golang时常见的错误" /><published>2019-07-30T00:00:00+08:00</published><updated>2019-07-30T00:00:00+08:00</updated><id>http://172.16.80.32:4000/2019/07/30/go-blog2</id><content type="html" xml:base="http://172.16.80.32:4000/2019/07/30/go-blog2.html">&lt;h3 id=&quot;1-在循环迭代器变量上使用goroutines&quot;&gt;1 在循环迭代器变量上使用goroutines&lt;/h3&gt;

&lt;p class=&quot;error&quot;&gt;错误的写法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;error&quot;&gt;上面的for循环可能无法达到您的预期，因为它们的val变量实际上是一个单独的变量，它接受每个slice元素的值。 因为闭包只绑定到那个变量，所以很有可能当你运行这个代码时，你会看到每次迭代打印的最后一个元素而不是序列中的每个值，因为goroutines可能不会开始执行，直到 循环之后。&lt;/p&gt;

&lt;p class=&quot;success&quot;&gt;编写闭包循环正确的写法应该是:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;success&quot;&gt;通过将val作为参数添加到闭包中，在每次迭代时计算val并将其放置在goroutine的堆栈上，因此每个切片元素在最终执行时都可用于goroutine。&lt;/p&gt;

&lt;p&gt;Note that without executing this closure as a goroutine, the code runs as expected. The following example prints out the integers between 1 and 10.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;即使闭包仍然对同一个变量关闭(在这种情况下，是i)，它们也是在变量改变之前执行的，导致了期望的行为。
点击查看&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://golang.org/doc/go_faq.html#closures_and_goroutines&quot;&gt;闭包作为goroutines运行会发生什么&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:scroll(0,0)&quot;&gt;– 返回顶部 –&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>雷永成|Ray_YC</name></author><category term="GO-lang" /><summary type="html">1 在循环迭代器变量上使用goroutines 错误的写法： 1 2 3 4 5 for _, val := range values { go func() { fmt.Println(val) }() } 上面的for循环可能无法达到您的预期，因为它们的val变量实际上是一个单独的变量，它接受每个slice元素的值。 因为闭包只绑定到那个变量，所以很有可能当你运行这个代码时，你会看到每次迭代打印的最后一个元素而不是序列中的每个值，因为goroutines可能不会开始执行，直到 循环之后。 编写闭包循环正确的写法应该是: 1 2 3 4 5 for _, val := range values { go func(val interface{}) { fmt.Println(val) }(val) } 通过将val作为参数添加到闭包中，在每次迭代时计算val并将其放置在goroutine的堆栈上，因此每个切片元素在最终执行时都可用于goroutine。 Note that without executing this closure as a goroutine, the code runs as expected. The following example prints out the integers between 1 and 10. 1 2 3 4 5 for i := 1; i &amp;lt;= 10; i++ { func() { fmt.Println(i) }() } 即使闭包仍然对同一个变量关闭(在这种情况下，是i)，它们也是在变量改变之前执行的，导致了期望的行为。 点击查看 闭包作为goroutines运行会发生什么 – 返回顶部 –</summary></entry><entry><title type="html">Welcome</title><link href="http://172.16.80.32:4000/2018/07/01/welcome.html" rel="alternate" type="text/html" title="Welcome" /><published>2018-07-01T00:00:00+08:00</published><updated>2018-07-01T00:00:00+08:00</updated><id>http://172.16.80.32:4000/2018/07/01/welcome</id><content type="html" xml:base="http://172.16.80.32:4000/2018/07/01/welcome.html">&lt;p&gt;If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost:&lt;/p&gt;

&lt;p&gt;You may want to &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/configuration&quot;&gt;config the site&lt;/a&gt; or &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/writing-posts&quot;&gt;writing a post&lt;/a&gt; next. Please feel free to &lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/issues&quot;&gt;create an issue&lt;/a&gt; or &lt;a href=&quot;mailto:kitian616@outlook.com&quot;&gt;send me email&lt;/a&gt; if you have any questions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;p&gt;If you like TeXt, don’t forget to give me a star. :star2:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&amp;amp;style=social&quot; alt=&quot;Star This Project&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>雷永成|Ray_YC</name></author><category term="TeXt" /><summary type="html">If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost: You may want to config the site or writing a post next. Please feel free to create an issue or send me email if you have any questions.</summary></entry><entry><title type="html">Post with Header Image</title><link href="http://172.16.80.32:4000/2018/06/01/header-image.html" rel="alternate" type="text/html" title="Post with Header Image" /><published>2018-06-01T00:00:00+08:00</published><updated>2018-06-01T00:00:00+08:00</updated><id>http://172.16.80.32:4000/2018/06/01/header-image</id><content type="html" xml:base="http://172.16.80.32:4000/2018/06/01/header-image.html">&lt;p&gt;A Post with Header Image, See &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout&quot;&gt;Page layout&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>雷永成|Ray_YC</name></author><category term="TeXt" /><summary type="html">A Post with Header Image, See Page layout for more examples.</summary></entry></feed>